name: Process Draft Releases with MSIX

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  STORE_APP_ID: ${{ secrets.PRODUCT_ID }}

jobs:
  prepare-msix-package:
    runs-on: windows-latest
    outputs:
      release-tag: ${{ steps.get-drafts.outputs.tag }}
      version: ${{ steps.extract-version.outputs.version }}
      msix-filename: ${{ steps.prepare-file.outputs.final-filename }}
    
    steps:
    - name: Get draft releases
      id: get-drafts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const draftReleases = releases.filter(release => release.draft);
          console.log(`Found ${draftReleases.length} draft releases`);
          
          if (draftReleases.length === 0) {
            core.setFailed('No draft releases found');
          }
          
          const firstDraft = draftReleases[0];
          core.setOutput('tag', firstDraft.tag_name);
          core.setOutput('release_id', firstDraft.id.toString());
          return firstDraft;

    - name: Extract version from tag
      id: extract-version
      shell: bash
      run: |
        TAG="${{ steps.get-drafts.outputs.tag }}"  # 格式: v1.2.3.0
        VERSION=$(echo "$TAG" | sed 's/^v//')      # 格式: 1.2.3.0
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Tag: $TAG, Version: $VERSION"

    - name: Download MSIX from Microsoft Store
      id: download-msix
      shell: pwsh
      run: |
        $appId = "${{ env.STORE_APP_ID }}"
        $tagVersion = "${{ steps.extract-version.outputs.version }}"  # 格式: 1.2.3.0
        
        Write-Host "Downloading MSIX for App ID: $appId"
        Write-Host "Target version: $tagVersion"
        
        $postParams = @{
            type = 'ProductId'
            url = "$appId"
            ring = 'RP'
            lang = 'zh-CN'
        }
        
        $response = Invoke-WebRequest "https://store.rg-adguard.net/api/GetFiles" -Method POST -Body $postParams
        $content = $response.Content
        
        # 调试：输出部分响应内容
        Write-Host "=== 响应内容片段（包含mstouk57g）==="
        $content -split "`n" | Where-Object { $_ -match "mstouk57g" } | ForEach-Object { Write-Host $_ }
        Write-Host "=== 片段结束 ==="
        
        # 修正正则表达式，匹配所有链接（包括没有https?的）
        $downloadLinks = $content | Select-String -Pattern 'href="([^"]*\.msix[^"]*)"' -AllMatches | 
                        ForEach-Object { $_.Matches } | ForEach-Object { $_.Groups[1].Value }
        
        Write-Host "找到所有MSIX下载链接数量: $($downloadLinks.Count)"
        $downloadLinks | ForEach-Object { Write-Host "MSIX链接: $_" }
        
        # 处理相对链接（补全为完整URL）
        $fullLinks = $downloadLinks | ForEach-Object {
            if ($_ -match '^https?://') {
                $_
            } else {
                "https://store.rg-adguard.net" + $_
            }
        }
        
        # 过滤出你的应用链接
        $yourAppLinks = $fullLinks | Where-Object { $_ -match 'mstouk57g.*RailGo' }
        Write-Host "找到你的应用MSIX链接数量: $($yourAppLinks.Count)"
        $yourAppLinks | ForEach-Object { Write-Host "你的应用链接: $_" }
        
        if ($yourAppLinks.Count -eq 0) {
            Write-Error "没有找到你的应用MSIX下载链接"
            exit 1
        }
        
        # 根据tag版本选择对应的下载链接
        $matchingLinks = $yourAppLinks | Where-Object { $_ -match $tagVersion }
        
        if ($matchingLinks.Count -eq 0) {
            Write-Host "没有找到版本 $tagVersion 的MSIX包，可用的版本有:"
            $yourAppLinks | ForEach-Object { 
                if ($_ -match 'RailGo_([\d.]+)_') {
                    Write-Host "  - $($matches[1])"
                }
            }
            Write-Error "没有找到匹配版本 $tagVersion 的MSIX下载链接"
            exit 1
        }
        
        $downloadUrl = $matchingLinks[0]
        Write-Host "选择匹配版本的链接: $downloadUrl"
        
        Invoke-WebRequest -Uri $downloadUrl -OutFile "temp-package.msix"
        Write-Host "✓ 成功下载MSIX包"

    - name: Parse MSIX version
      id: parse-msix-version
      shell: pwsh
      run: |
        # 解析MSIX包版本
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        
        $zipPath = "temp-package.msix.zip"
        Copy-Item "temp-package.msix" $zipPath
        
        $tempDir = "msix-extract"
        New-Item -ItemType Directory -Path $tempDir | Out-Null
        
        [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $tempDir)
        
        $manifestPath = Join-Path $tempDir 'AppxManifest.xml'
        [xml]$manifest = Get-Content $manifestPath
        $msixVersion = $manifest.Package.Identity.Version  # 格式: 1.2.3.0
        
        # 清理
        Remove-Item $tempDir -Recurse -Force
        Remove-Item $zipPath -Force
        
        Write-Host "MSIX package version: $msixVersion"
        echo "msix-version=$msixVersion" >> $env:GITHUB_OUTPUT

    - name: Compare versions and rename file
      id: prepare-file
      shell: pwsh
      run: |
        $tagVersion = "${{ steps.extract-version.outputs.version }}"  # 格式: 1.2.3.0 (去掉v前缀)
        $msixVersion = "${{ steps.parse-msix-version.outputs.msix-version }}"  # 格式: 1.2.3.0
        
        Write-Host "Release tag version: $tagVersion"
        Write-Host "MSIX package version: $msixVersion"
        
        # 直接比较版本号 (应该都是 x.x.x.0 格式)
        if ($tagVersion -ne $msixVersion) {
          Write-Warning "Version mismatch! Release: $tagVersion, MSIX: $msixVersion"
        } else {
          Write-Host "✓ Version match confirmed: $tagVersion"
        }
        
        # 生成最终文件名 (使用完整的四段式版本号)
        $finalFileName = "mstouk57g.RailGo_${tagVersion}_x64__px9fbtkyzyrzy.Msix"
        Move-Item -Path "temp-package.msix" -Destination $finalFileName -Force
        
        Write-Host "Final filename: $finalFileName"
        echo "final-filename=$finalFileName" >> $env:GITHUB_OUTPUT

    - name: Upload MSIX artifact
      uses: actions/upload-artifact@v4
      with:
        name: msix-package
        path: ${{ steps.prepare-file.outputs.final-filename }}
        retention-days: 1

  # 使用你现有的release job
  release:
    needs: prepare-msix-package
    uses: ./.github/workflows/release.yml
    with:
      version: ${{ needs.prepare-msix-package.outputs.release-tag }}
      mode: 'publish_only'
    secrets:
      RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}