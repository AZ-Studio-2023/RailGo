name: Create Store Submission Draft

on:
  workflow_dispatch

jobs:
  create-submission-draft:
    runs-on: ubuntu-latest
    steps:
    - name: Get Access Token
      id: get_token
      run: |
        response=$(curl -s -X POST \
          "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/v2.0/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -d "scope=https://api.store.microsoft.com/.default" \
          -d "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
          -d "grant_type=client_credentials")
        
        access_token=$(echo $response | jq -r '.access_token')
        if [ "$access_token" = "null" ]; then
          echo "Failed to get access token: $response"
          exit 1
        fi
        echo "access_token=$access_token" >> $GITHUB_OUTPUT
        echo "✅ Access token obtained successfully"

    - name: Update Submission with MSIX
      run: |
        package_url="https://github.com/AZ-Studio-2023/RailGo/releases/download/0.0.6.0/RailGo_0.0.6.0_x64.msix"
        
        update_data=$(cat <<EOF
        {
          "packages": [{
            "packageUrl": "$package_url",
            "languages": ["zh-CN"],
            "architectures": ["x64"],
            "isSilentInstall": true
          }]
        }
EOF
        )
        
        echo "📦 Updating submission with package: $package_url"
        
        response=$(curl -s -X PUT \
          "https://api.store.microsoft.com/submission/v1/product/${{ secrets.PRODUCT_ID }}/packages" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "X-Seller-Account-Id: ${{ secrets.SELLER_ID }}" \
          -H "Content-Type: application/json" \
          -d "$update_data")
        
        echo "Update response: $response"
        
        # 检查响应是否成功
        is_success=$(echo $response | jq -r '.isSuccess')
        if [ "$is_success" != "true" ]; then
          echo "❌ Update failed: $response"
          exit 1
        fi
        echo "✅ Package updated successfully"

    - name: Commit Package Changes
      run: |
        response=$(curl -s -X POST \
          "https://api.store.microsoft.com/submission/v1/product/${{ secrets.PRODUCT_ID }}/packages/commit" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "X-Seller-Account-Id: ${{ secrets.SELLER_ID }}")
        
        echo "Commit response: $response"
        
        is_success=$(echo $response | jq -r '.isSuccess')
        if [ "$is_success" != "true" ]; then
          echo "❌ Commit failed: $response"
          exit 1
        fi
        echo "✅ Package changes committed"

    - name: Wait for Modules to be Ready
      id: poll_status
      run: |
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "⏳ Polling module status (attempt $attempt/$max_attempts)..."
          
          status_response=$(curl -s -X GET \
            "https://api.store.microsoft.com/submission/v1/product/${{ secrets.PRODUCT_ID }}/status" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "X-Seller-Account-Id: ${{ secrets.SELLER_ID }}")
          
          is_ready=$(echo $status_response | jq -r '.responseData.isReady')
          echo "Module status: $status_response"
          
          if [ "$is_ready" = "true" ]; then
            echo "✅ All modules are ready!"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Timeout waiting for modules to be ready"
            exit 1
          fi
          
          echo "Waiting 10 seconds before next check..."
          sleep 10
          attempt=$((attempt + 1))
        done

    - name: Create Submission (Without Publishing)
      run: |
        echo "📝 Creating submission draft (will not publish)..."
        
        # 只是验证可以创建提交，但不实际提交
        response=$(curl -s -X POST \
          "https://api.store.microsoft.com/submission/v1/product/${{ secrets.PRODUCT_ID }}/submit" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "X-Seller-Account-Id: ${{ secrets.SELLER_ID }}")
        
        echo "Submit API response: $response"
        
        submission_id=$(echo $response | jq -r '.responseData.submissionId // .responseData.ongoingSubmissionId // empty')
        
        if [ -n "$submission_id" ]; then
          echo "🎉 Submission draft created successfully!"
          echo "📋 Submission ID: $submission_id"
          echo "💡 Note: This is just a test - submission was NOT actually published to the store"
          echo "🔗 You can check the submission in Partner Center: https://partner.microsoft.com/dashboard"
        else
          echo "❌ Failed to create submission: $response"
          exit 1
        fi

    - name: Final Status
      run: |
        echo "=========================================="
        echo "✅ SUCCESS: Store submission draft created"
        echo "=========================================="
        echo "Package URL: https://github.com/AZ-Studio-2023/RailGo/releases/download/0.0.6.0/RailGo_0.0.6.0_x64.msix"
        echo "Product ID: ${{ secrets.PRODUCT_ID }}"
        echo "Seller ID: ${{ secrets.SELLER_ID }}"
        echo ""
        echo "Next steps:"
        echo "1. Check Partner Center to see the draft submission"
        echo "2. Manually review and publish when ready"
        echo "3. This workflow only creates the draft, does not auto-publish"
        echo "=========================================="
