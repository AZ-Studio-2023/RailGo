name: Build and Upload

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0.1)'
        required: true
        type: string
      prerelease:
        description: 'If pre_release'
        required: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-package:

    name: Build and Package
    runs-on: windows-2022

    env:
      Solution_Name: RailGo.sln
      SigningKey_Path: SigningKey.pfx
      APPLICATION_ID: 9NTRZ0DMCKGZ

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Install StoreBroker
      shell: pwsh
      run: |
        Write-Output "Installing StoreBroker module..."
        Install-Module -Name StoreBroker -Force -AllowClobber -Scope CurrentUser
        Import-Module StoreBroker
        Write-Output "StoreBroker installed successfully"

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    - name: Update Manifest Version
      shell: pwsh
      run: |
        $AppxManifestPath = "RailGo/Package.appxmanifest"
        $newVersion = "${{ github.event.inputs.version }}"
        Write-Output "Setting new version: $newVersion"
        [xml]$xmlMSIX = Get-Content $AppxManifestPath
        $identityNode = $xmlMSIX.Package.Identity
        $identityNode.Version = $newVersion
        $xmlMSIX.Save($AppxManifestPath)

    - name: Create the MSIX Package
      run: msbuild $env:Solution_Name /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=false
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64|ARM64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: AppxPackages\
        Configuration: Release

    - name: Sign .msix
      shell: pwsh
      run: |
        # Get signtool.exe
        $signtool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Select-Object -First 1
        
        # Get File
        $msixFile = Get-ChildItem -Path "RailGo/AppxPackages" -Recurse -Filter "*.msix" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if (-not $msixFile) {
            throw "No MSIX file found"
        }

        Write-Output "Signing file: $($msixFile.FullName)"
        
        # Sign .msix
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERT }}")
        [IO.File]::WriteAllBytes("${{ env.SigningKey_Path }}", $pfx_cert_byte)
        & $signtool sign /f "${{ env.SigningKey_Path }}" /fd SHA256 /td SHA256 "$($msixFile.FullName)"
        Remove-Item "${{ env.SigningKey_Path }}"
        Write-Output "File signed successfully"

    - name: Upload to Microsoft Store using StoreBroker (Manual Package Cleanup)
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        
        # 导入 StoreBroker 模块
        Import-Module StoreBroker
        
        # 查找已签名的 MSIX 文件
        Write-Output "Looking for signed MSIX file..."
        $msixFile = Get-ChildItem -Path "RailGo/AppxPackages" -Recurse -Filter "*.msix" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if (-not $msixFile) {
            throw "No signed MSIX file found"
        }
        
        Write-Output "Found MSIX file: $($msixFile.FullName)"
        Write-Output "File size: $([math]::Round($msixFile.Length / 1MB, 2)) MB"
        
        # 设置认证信息
        Write-Output "Setting up StoreBroker authentication..."
        $clientId = "${{ secrets.AZURE_CLIENT_ID }}"
        $clientSecret = "${{ secrets.AZURE_CLIENT_SECRET }}"
        $tenantId = "${{ secrets.AZURE_TENANT_ID }}"
        
        # 创建凭据
        $securePassword = ConvertTo-SecureString $clientSecret -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($clientId, $securePassword)
        
        # 设置 StoreBroker 认证
        Set-StoreBrokerAuthentication -TenantId $tenantId -Credential $credential
        
        # 创建输出目录
        $outPath = "SubmissionPackage"
        if (Test-Path $outPath) {
            Remove-Item $outPath -Recurse -Force
        }
        New-Item -ItemType Directory -Path $outPath -Force
        
        # 创建基本的提交配置
        Write-Output "Creating submission configuration..."
        $configContent = @"
{
    "targetPublishMode": "Manual",
    "targetPublishDate": "",
    "notesForReviewer": "Automated submission via GitHub Actions - Version ${{ github.event.inputs.version }}",
    "applicationCategory": "Productivity",
    "pricing": {
        "trialPeriod": "NoFreeTrial",
        "marketSpecificPricings": {},
        "sales": []
    },
    "visibility": "Public",
    "allowTargetFutureDeviceFamilies": {
        "Desktop": true,
        "Mobile": false,
        "Holographic": false,
        "Xbox": false
    },
    "allowMicrosoftDecideAppAvailabilityToFutureDeviceFamilies": true,
    "languages": ["en-US"]
}
"@
        $configContent | Out-File -FilePath "$outPath\submission.json" -Encoding UTF8
        
        # 使用 StoreBroker 创建提交包
        Write-Output "Creating submission package..."
        try {
            New-SubmissionPackage -ConfigPath "$outPath\submission.json" -AppxPath $msixFile.FullName -OutPath $outPath -OutName "package" -Force
            Write-Output "✅ Submission package created successfully"
        } catch {
            Write-Error "Failed to create submission package: $($_.Exception.Message)"
            exit 1
        }
        
        # 手动方法：先删除旧包，然后添加新包
        Write-Output "Starting manual package cleanup and update process..."
        
        # 1. 创建新提交（克隆当前发布的提交）
        Write-Output "Step 1: Creating new submission..."
        $submission = New-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -Force
        Write-Output "✅ New submission created with ID: $($submission.id)"
        
        # 2. 显示当前提交中的所有包
        Write-Output "Step 2: Current packages in submission:"
        if ($submission.applicationPackages -and $submission.applicationPackages.Count -gt 0) {
            for ($i = 0; $i -lt $submission.applicationPackages.Count; $i++) {
                $package = $submission.applicationPackages[$i]
                Write-Output "  Package [$i]: $($package.fileName) - Status: $($package.fileStatus)"
            }
            
            # 3. 标记所有旧包为待删除
            Write-Output "Step 3: Marking all existing packages for deletion..."
            foreach ($package in $submission.applicationPackages) {
                $package.fileStatus = 'PendingDelete'
                Write-Output "  Marked for deletion: $($package.fileName)"
            }
        } else {
            Write-Output "  No existing packages found in submission"
        }
        
        # 4. 解析新包信息并添加到提交
        Write-Output "Step 4: Adding new package to submission..."
        $packageJsonPath = Join-Path $outPath "package.json"
        if (Test-Path $packageJsonPath) {
            $packageJson = Get-Content $packageJsonPath -Encoding UTF8 | ConvertFrom-Json
            
            # 添加新包
            if ($packageJson.applicationPackages -and $packageJson.applicationPackages.Count -gt 0) {
                foreach ($newPackage in $packageJson.applicationPackages) {
                    $submission.applicationPackages += $newPackage
                    Write-Output "  Added new package: $($newPackage.fileName)"
                }
            } else {
                Write-Error "No application packages found in package.json"
                exit 1
            }
        } else {
            Write-Error "package.json not found at: $packageJsonPath"
            exit 1
        }
        
        # 5. 更新提交
        Write-Output "Step 5: Updating submission with changes..."
        Set-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -UpdatedSubmission $submission
        Write-Output "✅ Submission updated successfully"
        
        # 6. 上传包文件
        Write-Output "Step 6: Uploading package file..."
        $packageZipPath = Join-Path $outPath "package.zip"
        if (Test-Path $packageZipPath) {
            Set-SubmissionPackage -PackagePath $packageZipPath -UploadUrl $submission.fileUploadUrl
            Write-Output "✅ Package file uploaded successfully"
        } else {
            Write-Error "Package zip file not found at: $packageZipPath"
            exit 1
        }
        
        # 7. 完成提交
        Write-Output "Step 7: Committing submission..."
        Complete-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -SubmissionId $submission.id
        Write-Output "✅ Submission committed successfully"
        
        Write-Output ""
        Write-Output "🎉 Successfully uploaded to Microsoft Store!"
        Write-Output "📋 Submission ID: $($submission.id)"
        Write-Output "📦 File: $($msixFile.Name)"
        Write-Output "🔄 All previous packages have been marked for deletion"
        Write-Output "➕ New package has been added"
        Write-Output "🔗 Visit Partner Center to complete: https://partner.microsoft.com/dashboard"

      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}