name: Build and Upload

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0.1)'
        required: true
        type: string
      prerelease:
        description: 'If pre_release'
        required: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use

jobs:
  build-and-package:

    name: Build and Package
    runs-on: windows-2022

    env:
      Solution_Name: RailGo.sln
      SigningKey_Path: SigningKey.pfx
      APPLICATION_ID: 9NTRZ0DMCKGZ 

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    - name: Update Manifest Version
      shell: pwsh
      run: |
        $AppxManifestPath = "RailGo/Package.appxmanifest"
        $newVersion = "${{ github.event.inputs.version }}"
        $versionCode = Get-Date -Format "yyMMdd"
        Write-Output "Setting new version: $newVersion"
        Write-Output "Setting new version code: $versionCode"
        [xml]$xmlMSIX = Get-Content $AppxManifestPath
        $identityNode = $xmlMSIX.Package.Identity
        $identityNode.Version = $newVersion
        $xmlMSIX.Save($AppxManifestPath)

    - name: Create the MSIX Package
      run: msbuild $env:Solution_Name /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=false
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64|ARM64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: AppxPackages\
        Configuration: Release

    - name: Sign .msix
      run: |
        # Get signtool.exe
        $signtool = Get-Item -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe"
        if ($signtool -is [array]) {
          $signtool = $signtool[0]
        }

        # Get File
        $msixFile = Get-Item -Path "RailGo/AppxPackages/*/*.msix"

        # Sign .msix
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERT }}")
        [IO.File]::WriteAllBytes("${{ env.SigningKey_Path }}", $pfx_cert_byte)
        & $signtool sign /f "${{ env.SigningKey_Path }}" /fd SHA256 /td SHA256 "$msixFile"
        rm "${{ env.SigningKey_Path }}"

    - name: Upload to Microsoft Store via REST API
      shell: pwsh
      run: |
        # Ëé∑ÂèñËÆøÈóÆ‰ª§Áâå
        Write-Output "Getting access token from Azure AD..."
        $tokenBody = @{
            grant_type    = "client_credentials"
            client_id     = "${{ secrets.AZURE_CLIENT_ID }}"
            client_secret = "${{ secrets.AZURE_CLIENT_SECRET }}"
            resource      = "https://manage.devcenter.microsoft.com"
        }
        
        try {
            $tokenResponse = Invoke-RestMethod -Method Post -Uri "https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/oauth2/token" -Body $tokenBody
            $accessToken = $tokenResponse.access_token
            Write-Output "‚úÖ Successfully obtained access token"
        } catch {
            Write-Error "Failed to get access token: $($_.Exception.Message)"
            exit 1
        }

        # Êü•Êâæ MSIX Êñá‰ª∂
        Write-Output "Looking for signed MSIX file..."
        $msixFile = Get-ChildItem -Path "RailGo/AppxPackages" -Recurse -Filter "*.msix" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if (-not $msixFile) {
            Write-Error "No MSIX file found in RailGo/AppxPackages directory"
            exit 1
        }

        Write-Output "Found MSIX file: $($msixFile.FullName)"
        Write-Output "File size: $([math]::Round($msixFile.Length / 1MB, 2)) MB"

        # ËÆæÁΩÆ API ËØ∑Ê±ÇÂ§¥
        $headers = @{
            "Authorization" = "Bearer $accessToken"
            "Content-Type" = "application/json"
        }

        # 1. ÂàõÂª∫Êñ∞ÁöÑÊèê‰∫§
        Write-Output "Creating new submission..."
        try {
            $submissionResponse = Invoke-RestMethod `
                -Method Post `
                -Uri "https://manage.devcenter.microsoft.com/v1.0/my/applications/${{ env.APPLICATION_ID }}/submissions" `
                -Headers $headers
            
            $submissionId = $submissionResponse.id
            Write-Output "‚úÖ Submission created with ID: $submissionId"
        } catch {
            Write-Error "Failed to create submission: $($_.Exception.Message)"
            if ($_.Exception.Response) {
                Write-Output "Response: $($_.Exception.Response.StatusDescription)"
            }
            exit 1
        }

        # 2. Áõ¥Êé•‰∏ä‰º†Êñá‰ª∂Âà∞Êèê‰∫§Ôºà‰ΩøÁî®Ê≠£Á°ÆÁöÑ API Á´ØÁÇπÔºâ
        Write-Output "Uploading package directly to submission..."
        try {
            # ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
            $fileBytes = [System.IO.File]::ReadAllBytes($msixFile.FullName)
            
            # Áõ¥Êé•‰∏ä‰º†Âà∞Êèê‰∫§ÁöÑÂåÖÁ´ØÁÇπ
            $uploadHeaders = @{
                "Authorization" = "Bearer $accessToken"
                "Content-Type" = "application/octet-stream"
            }
            
            # ‰ΩøÁî®Ê≠£Á°ÆÁöÑ‰∏ä‰º†Á´ØÁÇπ
            $uploadResponse = Invoke-RestMethod `
                -Method Put `
                -Uri "https://manage.devcenter.microsoft.com/v1.0/my/applications/${{ env.APPLICATION_ID }}/submissions/$submissionId/packages" `
                -Headers $uploadHeaders `
                -Body $fileBytes
            
            Write-Output "‚úÖ File uploaded successfully"
        } catch {
            Write-Error "Failed to upload file: $($_.Exception.Message)"
            if ($_.Exception.Response) {
                $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
                $reader.BaseStream.Position = 0
                $reader.DiscardBufferedData()
                $errorResponse = $reader.ReadToEnd()
                Write-Output "Error response: $errorResponse"
            }
            exit 1
        }

        # 3. Êèê‰∫§Êõ¥ÊîπÔºàÂèØÈÄâ - ÂàõÂª∫ËçâÁ®ø‰ΩÜ‰∏çÊèê‰∫§ÂÆ°Ê†∏Ôºâ
        Write-Output "Updating submission status..."
        try {
            $updateBody = @{
                status = "CommitStarted"
            } | ConvertTo-Json

            $updateResponse = Invoke-RestMethod `
                -Method Patch `
                -Uri "https://manage.devcenter.microsoft.com/v1.0/my/applications/${{ env.APPLICATION_ID }}/submissions/$submissionId" `
                -Headers $headers `
                -Body $updateBody

            Write-Output "‚úÖ Submission updated successfully"
        } catch {
            Write-Output "‚ö†Ô∏è  Submission update failed, but package was uploaded. You can complete manually in Partner Center."
            Write-Output "Error: $($_.Exception.Message)"
        }

        Write-Output ""
        Write-Output "üéâ Package successfully uploaded to Microsoft Store!"
        Write-Output "üìã Submission ID: $submissionId"
        Write-Output "üì¶ File: $($msixFile.Name)"
        Write-Output "üîó Please visit Partner Center to complete the submission: https://partner.microsoft.com/dashboard"
        Write-Output "üí° Note: The package is uploaded as a draft. You need to manually complete the submission process."

      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}