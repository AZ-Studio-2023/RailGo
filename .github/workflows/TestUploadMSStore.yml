name: Build and Upload

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0.1)'
        required: true
        type: string
      prerelease:
        description: 'If pre_release'
        required: true
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-package:

    name: Build and Package
    runs-on: windows-2022

    env:
      Solution_Name: RailGo.sln
      SigningKey_Path: SigningKey.pfx
      APPLICATION_ID: 9NTRZ0DMCKGZ

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Install StoreBroker
      shell: pwsh
      run: |
        Write-Output "Installing StoreBroker module..."
        Install-Module -Name StoreBroker -Force -AllowClobber -Scope CurrentUser
        Import-Module StoreBroker
        Write-Output "StoreBroker installed successfully"

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: Release

    - name: Update Manifest Version
      shell: pwsh
      run: |
        $AppxManifestPath = "RailGo/Package.appxmanifest"
        $newVersion = "${{ github.event.inputs.version }}"
        Write-Output "Setting new version: $newVersion"
        [xml]$xmlMSIX = Get-Content $AppxManifestPath
        $identityNode = $xmlMSIX.Package.Identity
        $identityNode.Version = $newVersion
        $xmlMSIX.Save($AppxManifestPath)

    - name: Create the MSIX Package
      run: msbuild $env:Solution_Name /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=false
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64|ARM64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: AppxPackages\
        Configuration: Release

    - name: Sign .msix
      shell: pwsh
      run: |
        # Get signtool.exe
        $signtool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Select-Object -First 1
        
        # Get File
        $msixFile = Get-ChildItem -Path "RailGo/AppxPackages" -Recurse -Filter "*.msix" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if (-not $msixFile) {
            throw "No MSIX file found"
        }

        Write-Output "Signing file: $($msixFile.FullName)"
        
        # Sign .msix
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERT }}")
        [IO.File]::WriteAllBytes("${{ env.SigningKey_Path }}", $pfx_cert_byte)
        & $signtool sign /f "${{ env.SigningKey_Path }}" /fd SHA256 /td SHA256 "$($msixFile.FullName)"
        Remove-Item "${{ env.SigningKey_Path }}"
        Write-Output "File signed successfully"

    - name: Upload to Microsoft Store using StoreBroker
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        
        # 导入 StoreBroker 模块
        Import-Module StoreBroker
        
        # 查找已签名的 MSIX 文件
        Write-Output "Looking for signed MSIX file..."
        $msixFile = Get-ChildItem -Path "RailGo/AppxPackages" -Recurse -Filter "*.msix" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if (-not $msixFile) {
            throw "No signed MSIX file found"
        }
        
        Write-Output "Found MSIX file: $($msixFile.FullName)"
        
        # 设置认证信息
        Write-Output "Setting up StoreBroker authentication..."
        $clientId = "${{ secrets.AZURE_CLIENT_ID }}"
        $clientSecret = "${{ secrets.AZURE_CLIENT_SECRET }}"
        $tenantId = "${{ secrets.AZURE_TENANT_ID }}"
        
        # 创建凭据
        $securePassword = ConvertTo-SecureString $clientSecret -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($clientId, $securePassword)
        
        # 设置 StoreBroker 认证
        Set-StoreBrokerAuthentication -TenantId $tenantId -Credential $credential
        
        # 创建提交包
        Write-Output "Creating submission package..."
        $outPath = "SubmissionPackage"
        if (Test-Path $outPath) {
            Remove-Item $outPath -Recurse -Force
        }
        New-Item -ItemType Directory -Path $outPath -Force
        
        # 创建简单的提交配置文件（如果需要，您可以创建更详细的 submission.json）
        $configPath = "submission.json"
        if (-not (Test-Path $configPath)) {
            Write-Output "Creating basic submission configuration..."
            $basicConfig = @{
                "targetPublishMode" = "Manual"
                "targetPublishDate" = ""
                "notesForReviewer" = "Automated submission via GitHub Actions"
            } | ConvertTo-Json -Depth 3
            $basicConfig | Out-File -FilePath $configPath -Encoding UTF8
        }
        
        # 使用 StoreBroker 创建提交包
        try {
            New-SubmissionPackage -ConfigPath $configPath -AppxPath $msixFile.FullName -OutPath $outPath -OutName "package"
            Write-Output "✅ Submission package created successfully"
        } catch {
            Write-Error "Failed to create submission package: $($_.Exception.Message)"
            exit 1
        }
        
        # 创建新提交
        Write-Output "Creating new submission..."
        try {
            $submission = New-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -Force
            Write-Output "✅ New submission created with ID: $($submission.id)"
        } catch {
            Write-Error "Failed to create submission: $($_.Exception.Message)"
            exit 1
        }
        
        # 解析提交包元数据
        Write-Output "Updating submission with package information..."
        $packageJsonPath = Join-Path $outPath "package.json"
        $packageJson = Get-Content $packageJsonPath -Encoding UTF8 | ConvertFrom-Json
        
        # 删除旧的应用包（如果有）
        foreach ($package in $submission.applicationPackages) {
            $package.fileStatus = "PendingDelete"
        }
        
        # 添加新的应用包
        $submission.applicationPackages += $packageJson.applicationPackages
        
        # 更新提交
        try {
            Set-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -UpdatedSubmission $submission
            Write-Output "✅ Submission updated with package information"
        } catch {
            Write-Error "Failed to update submission: $($_.Exception.Message)"
            exit 1
        }
        
        # 上传包文件
        Write-Output "Uploading package file..."
        $packageZipPath = Join-Path $outPath "package.zip"
        try {
            Set-SubmissionPackage -PackagePath $packageZipPath -UploadUrl $submission.fileUploadUrl
            Write-Output "✅ Package file uploaded successfully"
        } catch {
            Write-Error "Failed to upload package: $($_.Exception.Message)"
            exit 1
        }
        
        # 完成提交
        Write-Output "Completing submission..."
        try {
            Complete-ApplicationSubmission -AppId "${{ env.APPLICATION_ID }}" -SubmissionId $submission.id
            Write-Output "✅ Submission completed successfully"
        } catch {
            Write-Error "Failed to complete submission: $($_.Exception.Message)"
            exit 1
        }
        
        Write-Output ""
        Write-Output "🎉 Successfully uploaded to Microsoft Store!"
        Write-Output "📋 Submission ID: $($submission.id)"
        Write-Output "📦 File: $($msixFile.Name)"
        Write-Output "🔗 Visit Partner Center to complete: https://partner.microsoft.com/dashboard"

      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}